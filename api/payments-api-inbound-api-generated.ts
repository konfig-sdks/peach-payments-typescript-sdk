/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { Authentication } from '../models';
// @ts-ignore
import { Cart } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { Error400Response } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { MerchantTransactionIdStatusResponse } from '../models';
// @ts-ignore
import { PaymentBrand } from '../models';
// @ts-ignore
import { PaymentRequest } from '../models';
// @ts-ignore
import { PaymentType } from '../models';
// @ts-ignore
import { PaymentsApiInboundInitiateDebitTransactionResponse } from '../models';
// @ts-ignore
import { PaymentsApiInboundRefundTransaction502Response } from '../models';
// @ts-ignore
import { PaymentsApiInboundRefundTransactionResponse } from '../models';
// @ts-ignore
import { RefundPaymentType } from '../models';
// @ts-ignore
import { RefundRequest } from '../models';
// @ts-ignore
import { Shopify } from '../models';
// @ts-ignore
import { TransactionIdStatusResponse } from '../models';
// @ts-ignore
import { VirtualAccount } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentsApiInboundApi - axios parameter creator
 * @export
 */
export const PaymentsApiInboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiate a debit transaction.  Certain parameters are mandatory for specific payment methods and certain parameters act differently depending on the payment method.   - For 1Voucher, `customer.mobile` (the customer\'s phone number for receiving change vouchers and refunds) and `virtualAccount.password` (the voucher PIN) are mandatory. - For M-PESA, `virtualAccount.accountId` (the customer\'s 12-digit phone number) is mandatory. M-PESA only accepts integer amounts, not decimals, so round up your amount. - For blink by Emtel and MCB Juice, `virtualAccount.accountId` (the customer\'s 8-digit phone number) is mandatory. - For Mobicred, `virtualAccount.accountId` (the customer\'s Mobicred email address) and `virtualAccount.password` (the customer\'s Mobicred password) are mandatory. - For Capitec Pay, `virtualAccount.type` (the customer\'s identifier type; `IDNUMBER`, `CELLPHONE`, or `ACCOUNTNUMBER`) and `virtualAccount.accountId` (the customer\'s 13-digit ID number, 10-digit phone number starting with `0`, or up-to 64-digit, alphanumeric bank account number) are mandatory. High-risk merchants must provide the verified `IDNUMBER` and cannot use the `CELLPHONE` or `ACCOUNTNUMBER` account types. - For EFTsecure, Payflex, ZeroPay, FinChoicePay, Scan to Pay, M-PESA, blink by Emtel, Mobicred, Capitec Pay, Nebank Direct EFT, and MCB Juice, the `shopperResultUrl` is mandatory.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#payment-flow) and for sample calls, see our [public Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-693c4b18-dad5-4b6f-aeb0-99bc28b94812). 
         * @summary Payment
         * @param {PaymentRequest} [paymentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateDebitTransaction: async (paymentRequest?: PaymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the status of a transaction using the Peach Payments unique ID.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
         * @summary Query a transaction by transaction ID
         * @param {string} uniqueId The Peach Payments unique ID for the transaction.
         * @param {string} authenticationEntityId Authentication entityId.
         * @param {string} authenticationUserId Authentication userId.
         * @param {string} authenticationPassword Authentication password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTransactionById: async (uniqueId: string, authenticationEntityId: string, authenticationUserId: string, authenticationPassword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueId' is not null or undefined
            assertParamExists('queryTransactionById', 'uniqueId', uniqueId)
            // verify required parameter 'authenticationEntityId' is not null or undefined
            assertParamExists('queryTransactionById', 'authenticationEntityId', authenticationEntityId)
            // verify required parameter 'authenticationUserId' is not null or undefined
            assertParamExists('queryTransactionById', 'authenticationUserId', authenticationUserId)
            // verify required parameter 'authenticationPassword' is not null or undefined
            assertParamExists('queryTransactionById', 'authenticationPassword', authenticationPassword)
            const localVarPath = `/payments/{uniqueId}`
                .replace(`{${"uniqueId"}}`, encodeURIComponent(String(uniqueId !== undefined ? uniqueId : `-uniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (authenticationEntityId !== undefined) {
                localVarQueryParameter['authentication.entityId'] = authenticationEntityId;
            }

            if (authenticationUserId !== undefined) {
                localVarQueryParameter['authentication.userId'] = authenticationUserId;
            }

            if (authenticationPassword !== undefined) {
                localVarQueryParameter['authentication.password'] = authenticationPassword;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/{uniqueId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refund a successful debit transaction. You can only refund [certain payment methods](https://developer.peachpayments.com/docs/pp-payment-methods).  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#refund-flow). 
         * @summary Refund
         * @param {string} uniqueId The Peach Payments unique ID of the original debit transaction.
         * @param {RefundRequest} [refundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundTransaction: async (uniqueId: string, refundRequest?: RefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueId' is not null or undefined
            assertParamExists('refundTransaction', 'uniqueId', uniqueId)
            const localVarPath = `/payments/{uniqueId}`
                .replace(`{${"uniqueId"}}`, encodeURIComponent(String(uniqueId !== undefined ? uniqueId : `-uniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: refundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments/{uniqueId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(refundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the status of a transaction using the merchantTransactionId. Could return multiple results.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
         * @summary Query a transaction by merchantTransactionId
         * @param {string} authenticationUserId 
         * @param {string} authenticationPassword 
         * @param {string} authenticationEntityId 
         * @param {string} merchantTransactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: async (authenticationUserId: string, authenticationPassword: string, authenticationEntityId: string, merchantTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationUserId' is not null or undefined
            assertParamExists('status', 'authenticationUserId', authenticationUserId)
            // verify required parameter 'authenticationPassword' is not null or undefined
            assertParamExists('status', 'authenticationPassword', authenticationPassword)
            // verify required parameter 'authenticationEntityId' is not null or undefined
            assertParamExists('status', 'authenticationEntityId', authenticationEntityId)
            // verify required parameter 'merchantTransactionId' is not null or undefined
            assertParamExists('status', 'merchantTransactionId', merchantTransactionId)
            const localVarPath = `/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (authenticationUserId !== undefined) {
                localVarQueryParameter['authentication.userId'] = authenticationUserId;
            }

            if (authenticationPassword !== undefined) {
                localVarQueryParameter['authentication.password'] = authenticationPassword;
            }

            if (authenticationEntityId !== undefined) {
                localVarQueryParameter['authentication.entityId'] = authenticationEntityId;
            }

            if (merchantTransactionId !== undefined) {
                localVarQueryParameter['merchantTransactionId'] = merchantTransactionId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApiInboundApi - functional programming interface
 * @export
 */
export const PaymentsApiInboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiInboundApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiate a debit transaction.  Certain parameters are mandatory for specific payment methods and certain parameters act differently depending on the payment method.   - For 1Voucher, `customer.mobile` (the customer\'s phone number for receiving change vouchers and refunds) and `virtualAccount.password` (the voucher PIN) are mandatory. - For M-PESA, `virtualAccount.accountId` (the customer\'s 12-digit phone number) is mandatory. M-PESA only accepts integer amounts, not decimals, so round up your amount. - For blink by Emtel and MCB Juice, `virtualAccount.accountId` (the customer\'s 8-digit phone number) is mandatory. - For Mobicred, `virtualAccount.accountId` (the customer\'s Mobicred email address) and `virtualAccount.password` (the customer\'s Mobicred password) are mandatory. - For Capitec Pay, `virtualAccount.type` (the customer\'s identifier type; `IDNUMBER`, `CELLPHONE`, or `ACCOUNTNUMBER`) and `virtualAccount.accountId` (the customer\'s 13-digit ID number, 10-digit phone number starting with `0`, or up-to 64-digit, alphanumeric bank account number) are mandatory. High-risk merchants must provide the verified `IDNUMBER` and cannot use the `CELLPHONE` or `ACCOUNTNUMBER` account types. - For EFTsecure, Payflex, ZeroPay, FinChoicePay, Scan to Pay, M-PESA, blink by Emtel, Mobicred, Capitec Pay, Nebank Direct EFT, and MCB Juice, the `shopperResultUrl` is mandatory.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#payment-flow) and for sample calls, see our [public Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-693c4b18-dad5-4b6f-aeb0-99bc28b94812). 
         * @summary Payment
         * @param {PaymentsApiInboundApiInitiateDebitTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateDebitTransaction(requestParameters: PaymentsApiInboundApiInitiateDebitTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsApiInboundInitiateDebitTransactionResponse>> {
            const paymentRequest: PaymentRequest = {
                authentication: requestParameters.authentication,
                merchantTransactionId: requestParameters.merchantTransactionId,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                paymentBrand: requestParameters.paymentBrand,
                paymentType: requestParameters.paymentType,
                virtualAccount: requestParameters.virtualAccount,
                shipping: requestParameters.shipping,
                billing: requestParameters.billing,
                shopify: requestParameters.shopify,
                customer: requestParameters.customer,
                cart: requestParameters.cart,
                merchantInvoiceId: requestParameters.merchantInvoiceId,
                shopperResultUrl: requestParameters.shopperResultUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateDebitTransaction(paymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the status of a transaction using the Peach Payments unique ID.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
         * @summary Query a transaction by transaction ID
         * @param {PaymentsApiInboundApiQueryTransactionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTransactionById(requestParameters: PaymentsApiInboundApiQueryTransactionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionIdStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryTransactionById(requestParameters.uniqueId, requestParameters.authenticationEntityId, requestParameters.authenticationUserId, requestParameters.authenticationPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refund a successful debit transaction. You can only refund [certain payment methods](https://developer.peachpayments.com/docs/pp-payment-methods).  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#refund-flow). 
         * @summary Refund
         * @param {PaymentsApiInboundApiRefundTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundTransaction(requestParameters: PaymentsApiInboundApiRefundTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsApiInboundRefundTransactionResponse>> {
            const refundRequest: RefundRequest = {
                authentication: requestParameters.authentication,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                paymentType: requestParameters.paymentType
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundTransaction(requestParameters.uniqueId, refundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the status of a transaction using the merchantTransactionId. Could return multiple results.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
         * @summary Query a transaction by merchantTransactionId
         * @param {PaymentsApiInboundApiStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async status(requestParameters: PaymentsApiInboundApiStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantTransactionIdStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.status(requestParameters.authenticationUserId, requestParameters.authenticationPassword, requestParameters.authenticationEntityId, requestParameters.merchantTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsApiInboundApi - factory interface
 * @export
 */
export const PaymentsApiInboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiInboundApiFp(configuration)
    return {
        /**
         * Initiate a debit transaction.  Certain parameters are mandatory for specific payment methods and certain parameters act differently depending on the payment method.   - For 1Voucher, `customer.mobile` (the customer\'s phone number for receiving change vouchers and refunds) and `virtualAccount.password` (the voucher PIN) are mandatory. - For M-PESA, `virtualAccount.accountId` (the customer\'s 12-digit phone number) is mandatory. M-PESA only accepts integer amounts, not decimals, so round up your amount. - For blink by Emtel and MCB Juice, `virtualAccount.accountId` (the customer\'s 8-digit phone number) is mandatory. - For Mobicred, `virtualAccount.accountId` (the customer\'s Mobicred email address) and `virtualAccount.password` (the customer\'s Mobicred password) are mandatory. - For Capitec Pay, `virtualAccount.type` (the customer\'s identifier type; `IDNUMBER`, `CELLPHONE`, or `ACCOUNTNUMBER`) and `virtualAccount.accountId` (the customer\'s 13-digit ID number, 10-digit phone number starting with `0`, or up-to 64-digit, alphanumeric bank account number) are mandatory. High-risk merchants must provide the verified `IDNUMBER` and cannot use the `CELLPHONE` or `ACCOUNTNUMBER` account types. - For EFTsecure, Payflex, ZeroPay, FinChoicePay, Scan to Pay, M-PESA, blink by Emtel, Mobicred, Capitec Pay, Nebank Direct EFT, and MCB Juice, the `shopperResultUrl` is mandatory.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#payment-flow) and for sample calls, see our [public Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-693c4b18-dad5-4b6f-aeb0-99bc28b94812). 
         * @summary Payment
         * @param {PaymentsApiInboundApiInitiateDebitTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateDebitTransaction(requestParameters: PaymentsApiInboundApiInitiateDebitTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsApiInboundInitiateDebitTransactionResponse> {
            return localVarFp.initiateDebitTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the status of a transaction using the Peach Payments unique ID.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
         * @summary Query a transaction by transaction ID
         * @param {PaymentsApiInboundApiQueryTransactionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTransactionById(requestParameters: PaymentsApiInboundApiQueryTransactionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionIdStatusResponse> {
            return localVarFp.queryTransactionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Refund a successful debit transaction. You can only refund [certain payment methods](https://developer.peachpayments.com/docs/pp-payment-methods).  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#refund-flow). 
         * @summary Refund
         * @param {PaymentsApiInboundApiRefundTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundTransaction(requestParameters: PaymentsApiInboundApiRefundTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsApiInboundRefundTransactionResponse> {
            return localVarFp.refundTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the status of a transaction using the merchantTransactionId. Could return multiple results.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
         * @summary Query a transaction by merchantTransactionId
         * @param {PaymentsApiInboundApiStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(requestParameters: PaymentsApiInboundApiStatusRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantTransactionIdStatusResponse> {
            return localVarFp.status(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for initiateDebitTransaction operation in PaymentsApiInboundApi.
 * @export
 * @interface PaymentsApiInboundApiInitiateDebitTransactionRequest
 */
export type PaymentsApiInboundApiInitiateDebitTransactionRequest = {
    
} & PaymentRequest

/**
 * Request parameters for queryTransactionById operation in PaymentsApiInboundApi.
 * @export
 * @interface PaymentsApiInboundApiQueryTransactionByIdRequest
 */
export type PaymentsApiInboundApiQueryTransactionByIdRequest = {
    
    /**
    * The Peach Payments unique ID for the transaction.
    * @type {string}
    * @memberof PaymentsApiInboundApiQueryTransactionById
    */
    readonly uniqueId: string
    
    /**
    * Authentication entityId.
    * @type {string}
    * @memberof PaymentsApiInboundApiQueryTransactionById
    */
    readonly authenticationEntityId: string
    
    /**
    * Authentication userId.
    * @type {string}
    * @memberof PaymentsApiInboundApiQueryTransactionById
    */
    readonly authenticationUserId: string
    
    /**
    * Authentication password.
    * @type {string}
    * @memberof PaymentsApiInboundApiQueryTransactionById
    */
    readonly authenticationPassword: string
    
}

/**
 * Request parameters for refundTransaction operation in PaymentsApiInboundApi.
 * @export
 * @interface PaymentsApiInboundApiRefundTransactionRequest
 */
export type PaymentsApiInboundApiRefundTransactionRequest = {
    
    /**
    * The Peach Payments unique ID of the original debit transaction.
    * @type {string}
    * @memberof PaymentsApiInboundApiRefundTransaction
    */
    readonly uniqueId: string
    
} & RefundRequest

/**
 * Request parameters for status operation in PaymentsApiInboundApi.
 * @export
 * @interface PaymentsApiInboundApiStatusRequest
 */
export type PaymentsApiInboundApiStatusRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PaymentsApiInboundApiStatus
    */
    readonly authenticationUserId: string
    
    /**
    * 
    * @type {string}
    * @memberof PaymentsApiInboundApiStatus
    */
    readonly authenticationPassword: string
    
    /**
    * 
    * @type {string}
    * @memberof PaymentsApiInboundApiStatus
    */
    readonly authenticationEntityId: string
    
    /**
    * 
    * @type {string}
    * @memberof PaymentsApiInboundApiStatus
    */
    readonly merchantTransactionId: string
    
}

/**
 * PaymentsApiInboundApiGenerated - object-oriented interface
 * @export
 * @class PaymentsApiInboundApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentsApiInboundApiGenerated extends BaseAPI {
    /**
     * Initiate a debit transaction.  Certain parameters are mandatory for specific payment methods and certain parameters act differently depending on the payment method.   - For 1Voucher, `customer.mobile` (the customer\'s phone number for receiving change vouchers and refunds) and `virtualAccount.password` (the voucher PIN) are mandatory. - For M-PESA, `virtualAccount.accountId` (the customer\'s 12-digit phone number) is mandatory. M-PESA only accepts integer amounts, not decimals, so round up your amount. - For blink by Emtel and MCB Juice, `virtualAccount.accountId` (the customer\'s 8-digit phone number) is mandatory. - For Mobicred, `virtualAccount.accountId` (the customer\'s Mobicred email address) and `virtualAccount.password` (the customer\'s Mobicred password) are mandatory. - For Capitec Pay, `virtualAccount.type` (the customer\'s identifier type; `IDNUMBER`, `CELLPHONE`, or `ACCOUNTNUMBER`) and `virtualAccount.accountId` (the customer\'s 13-digit ID number, 10-digit phone number starting with `0`, or up-to 64-digit, alphanumeric bank account number) are mandatory. High-risk merchants must provide the verified `IDNUMBER` and cannot use the `CELLPHONE` or `ACCOUNTNUMBER` account types. - For EFTsecure, Payflex, ZeroPay, FinChoicePay, Scan to Pay, M-PESA, blink by Emtel, Mobicred, Capitec Pay, Nebank Direct EFT, and MCB Juice, the `shopperResultUrl` is mandatory.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#payment-flow) and for sample calls, see our [public Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-693c4b18-dad5-4b6f-aeb0-99bc28b94812). 
     * @summary Payment
     * @param {PaymentsApiInboundApiInitiateDebitTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiInboundApiGenerated
     */
    public initiateDebitTransaction(requestParameters: PaymentsApiInboundApiInitiateDebitTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentsApiInboundApiFp(this.configuration).initiateDebitTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the status of a transaction using the Peach Payments unique ID.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
     * @summary Query a transaction by transaction ID
     * @param {PaymentsApiInboundApiQueryTransactionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiInboundApiGenerated
     */
    public queryTransactionById(requestParameters: PaymentsApiInboundApiQueryTransactionByIdRequest, options?: AxiosRequestConfig) {
        return PaymentsApiInboundApiFp(this.configuration).queryTransactionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refund a successful debit transaction. You can only refund [certain payment methods](https://developer.peachpayments.com/docs/pp-payment-methods).  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#refund-flow). 
     * @summary Refund
     * @param {PaymentsApiInboundApiRefundTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiInboundApiGenerated
     */
    public refundTransaction(requestParameters: PaymentsApiInboundApiRefundTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentsApiInboundApiFp(this.configuration).refundTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the status of a transaction using the merchantTransactionId. Could return multiple results.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
     * @summary Query a transaction by merchantTransactionId
     * @param {PaymentsApiInboundApiStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiInboundApiGenerated
     */
    public status(requestParameters: PaymentsApiInboundApiStatusRequest, options?: AxiosRequestConfig) {
        return PaymentsApiInboundApiFp(this.configuration).status(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
