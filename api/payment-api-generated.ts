/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckoutOptions } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { GenerateLinkErrorResponse } from '../models';
// @ts-ignore
import { GenerateLinkPayment } from '../models';
// @ts-ignore
import { GenerateLinkPaymentPayment } from '../models';
// @ts-ignore
import { GenerateLinkResponse } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
// @ts-ignore
import { PaymentGetAllPaymentLinks200Response } from '../models';
// @ts-ignore
import { PaymentGetAllPaymentLinksResponse } from '../models';
// @ts-ignore
import { PaymentOptions } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a previously-generated link by supplying the unique paymentId which is returned to you in the payment response.  For more information, see the [documentation](https://developer.peachpayments.com/docs/cancel-link). 
         * @summary Cancel link
         * @param {string} paymentId The ID of the payment. Returned when creating a new payment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelLink: async (paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('cancelLink', 'paymentId', paymentId)
            const localVarPath = `/api/payments/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId !== undefined ? paymentId : `-paymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/payments/{paymentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a unique payment link for a transaction and optionally send this link to the recipient via email, SMS, WhatsApp, or a combination of the three.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-link-1). 
         * @summary Generate link
         * @param {string} entityId The entity for the request.
         * @param {GenerateLinkPayment} generateLinkPayment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLink: async (entityId: string, generateLinkPayment: GenerateLinkPayment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('generateLink', 'entityId', entityId)
            // verify required parameter 'generateLinkPayment' is not null or undefined
            assertParamExists('generateLink', 'generateLinkPayment', generateLinkPayment)
            const localVarPath = `/api/channels/{entityId}/payments`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId !== undefined ? entityId : `-entityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: generateLinkPayment,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/channels/{entityId}/payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(generateLinkPayment, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list or export a CSV of all payment links. To export to CSV, change the request header\'s `Accept` value to `text/csv`. For more information, see the [documentation](https://developer.peachpayments.com/docs/retrieve-all-payment-links), or to try it out, see our [Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-265d80b0-5baa-478b-be10-debc942ca8f3).
         * @summary Retrieve or export all payment links
         * @param {string} [merchant] The unique merchant ID to scope the list to. Required if you\&#39;re exporting payment links to CSV.
         * @param {number} [offset] The offset from which to read data.
         * @param {number} [perPage] The amount of items to retrieve.
         * @param {string} [filtersStartDate] Retrieve all payment links from the start date onwards.
         * @param {string} [filtersEndDate] Retrieve all payment links until the end date.
         * @param {'initiated' | 'processing' | 'expired' | 'cancelled' | 'completed'} [filtersStatus] The payment link status to filter on.
         * @param {number} [filtersAmountValue] The amount to filter by.
         * @param {'lt' | 'lte' | 'gt' | 'gte' | 'eq'} [filtersAmountOperator] How to use the amountValue for filtering.
         * @param {'sendEmail' | 'sendSms' | 'sendWhatsapp' | 'emailCc' | 'emailBcc'} [filtersSendingOptions] The sending option to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPaymentLinks: async (merchant?: string, offset?: number, perPage?: number, filtersStartDate?: string, filtersEndDate?: string, filtersStatus?: 'initiated' | 'processing' | 'expired' | 'cancelled' | 'completed', filtersAmountValue?: number, filtersAmountOperator?: 'lt' | 'lte' | 'gt' | 'gte' | 'eq', filtersSendingOptions?: 'sendEmail' | 'sendSms' | 'sendWhatsapp' | 'emailCc' | 'emailBcc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (merchant !== undefined) {
                localVarQueryParameter['merchant'] = merchant;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (filtersStartDate !== undefined) {
                localVarQueryParameter['filters[startDate]'] = (filtersStartDate as any instanceof Date) ?
                    (filtersStartDate as any).toISOString() :
                    filtersStartDate;
            }

            if (filtersEndDate !== undefined) {
                localVarQueryParameter['filters[endDate]'] = (filtersEndDate as any instanceof Date) ?
                    (filtersEndDate as any).toISOString() :
                    filtersEndDate;
            }

            if (filtersStatus !== undefined) {
                localVarQueryParameter['filters[status]'] = filtersStatus;
            }

            if (filtersAmountValue !== undefined) {
                localVarQueryParameter['filters[amountValue]'] = filtersAmountValue;
            }

            if (filtersAmountOperator !== undefined) {
                localVarQueryParameter['filters[amountOperator]'] = filtersAmountOperator;
            }

            if (filtersSendingOptions !== undefined) {
                localVarQueryParameter['filters[sendingOptions]'] = filtersSendingOptions;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel a previously-generated link by supplying the unique paymentId which is returned to you in the payment response.  For more information, see the [documentation](https://developer.peachpayments.com/docs/cancel-link). 
         * @summary Cancel link
         * @param {PaymentApiCancelLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelLink(requestParameters: PaymentApiCancelLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelLink(requestParameters.paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a unique payment link for a transaction and optionally send this link to the recipient via email, SMS, WhatsApp, or a combination of the three.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-link-1). 
         * @summary Generate link
         * @param {PaymentApiGenerateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateLink(requestParameters: PaymentApiGenerateLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateLinkResponse>> {
            const generateLinkPayment: GenerateLinkPayment = {
                payment: requestParameters.payment,
                customer: requestParameters.customer,
                options: requestParameters.options,
                checkout: requestParameters.checkout
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateLink(requestParameters.entityId, generateLinkPayment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a paginated list or export a CSV of all payment links. To export to CSV, change the request header\'s `Accept` value to `text/csv`. For more information, see the [documentation](https://developer.peachpayments.com/docs/retrieve-all-payment-links), or to try it out, see our [Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-265d80b0-5baa-478b-be10-debc942ca8f3).
         * @summary Retrieve or export all payment links
         * @param {PaymentApiGetAllPaymentLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPaymentLinks(requestParameters: PaymentApiGetAllPaymentLinksRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentGetAllPaymentLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPaymentLinks(requestParameters.merchant, requestParameters.offset, requestParameters.perPage, requestParameters.filtersStartDate, requestParameters.filtersEndDate, requestParameters.filtersStatus, requestParameters.filtersAmountValue, requestParameters.filtersAmountOperator, requestParameters.filtersSendingOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * Cancel a previously-generated link by supplying the unique paymentId which is returned to you in the payment response.  For more information, see the [documentation](https://developer.peachpayments.com/docs/cancel-link). 
         * @summary Cancel link
         * @param {PaymentApiCancelLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelLink(requestParameters: PaymentApiCancelLinkRequest, options?: AxiosRequestConfig): AxiosPromise<MessageResponse> {
            return localVarFp.cancelLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a unique payment link for a transaction and optionally send this link to the recipient via email, SMS, WhatsApp, or a combination of the three.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-link-1). 
         * @summary Generate link
         * @param {PaymentApiGenerateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLink(requestParameters: PaymentApiGenerateLinkRequest, options?: AxiosRequestConfig): AxiosPromise<GenerateLinkResponse> {
            return localVarFp.generateLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list or export a CSV of all payment links. To export to CSV, change the request header\'s `Accept` value to `text/csv`. For more information, see the [documentation](https://developer.peachpayments.com/docs/retrieve-all-payment-links), or to try it out, see our [Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-265d80b0-5baa-478b-be10-debc942ca8f3).
         * @summary Retrieve or export all payment links
         * @param {PaymentApiGetAllPaymentLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPaymentLinks(requestParameters: PaymentApiGetAllPaymentLinksRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaymentGetAllPaymentLinksResponse> {
            return localVarFp.getAllPaymentLinks(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelLink operation in PaymentApi.
 * @export
 * @interface PaymentApiCancelLinkRequest
 */
export type PaymentApiCancelLinkRequest = {
    
    /**
    * The ID of the payment. Returned when creating a new payment.
    * @type {string}
    * @memberof PaymentApiCancelLink
    */
    readonly paymentId: string
    
}

/**
 * Request parameters for generateLink operation in PaymentApi.
 * @export
 * @interface PaymentApiGenerateLinkRequest
 */
export type PaymentApiGenerateLinkRequest = {
    
    /**
    * The entity for the request.
    * @type {string}
    * @memberof PaymentApiGenerateLink
    */
    readonly entityId: string
    
} & GenerateLinkPayment

/**
 * Request parameters for getAllPaymentLinks operation in PaymentApi.
 * @export
 * @interface PaymentApiGetAllPaymentLinksRequest
 */
export type PaymentApiGetAllPaymentLinksRequest = {
    
    /**
    * The unique merchant ID to scope the list to. Required if you\'re exporting payment links to CSV.
    * @type {string}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly merchant?: string
    
    /**
    * The offset from which to read data.
    * @type {number}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly offset?: number
    
    /**
    * The amount of items to retrieve.
    * @type {number}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly perPage?: number
    
    /**
    * Retrieve all payment links from the start date onwards.
    * @type {string}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly filtersStartDate?: string
    
    /**
    * Retrieve all payment links until the end date.
    * @type {string}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly filtersEndDate?: string
    
    /**
    * The payment link status to filter on.
    * @type {'initiated' | 'processing' | 'expired' | 'cancelled' | 'completed'}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly filtersStatus?: 'initiated' | 'processing' | 'expired' | 'cancelled' | 'completed'
    
    /**
    * The amount to filter by.
    * @type {number}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly filtersAmountValue?: number
    
    /**
    * How to use the amountValue for filtering.
    * @type {'lt' | 'lte' | 'gt' | 'gte' | 'eq'}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly filtersAmountOperator?: 'lt' | 'lte' | 'gt' | 'gte' | 'eq'
    
    /**
    * The sending option to filter on.
    * @type {'sendEmail' | 'sendSms' | 'sendWhatsapp' | 'emailCc' | 'emailBcc'}
    * @memberof PaymentApiGetAllPaymentLinks
    */
    readonly filtersSendingOptions?: 'sendEmail' | 'sendSms' | 'sendWhatsapp' | 'emailCc' | 'emailBcc'
    
}

/**
 * PaymentApiGenerated - object-oriented interface
 * @export
 * @class PaymentApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentApiGenerated extends BaseAPI {
    /**
     * Cancel a previously-generated link by supplying the unique paymentId which is returned to you in the payment response.  For more information, see the [documentation](https://developer.peachpayments.com/docs/cancel-link). 
     * @summary Cancel link
     * @param {PaymentApiCancelLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public cancelLink(requestParameters: PaymentApiCancelLinkRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).cancelLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a unique payment link for a transaction and optionally send this link to the recipient via email, SMS, WhatsApp, or a combination of the three.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-link-1). 
     * @summary Generate link
     * @param {PaymentApiGenerateLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public generateLink(requestParameters: PaymentApiGenerateLinkRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).generateLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list or export a CSV of all payment links. To export to CSV, change the request header\'s `Accept` value to `text/csv`. For more information, see the [documentation](https://developer.peachpayments.com/docs/retrieve-all-payment-links), or to try it out, see our [Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-265d80b0-5baa-478b-be10-debc942ca8f3).
     * @summary Retrieve or export all payment links
     * @param {PaymentApiGetAllPaymentLinksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public getAllPaymentLinks(requestParameters: PaymentApiGetAllPaymentLinksRequest = {}, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getAllPaymentLinks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
