/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckoutV2 } from '../models';
// @ts-ignore
import { CheckoutV2Billing } from '../models';
// @ts-ignore
import { CheckoutV2Customer } from '../models';
// @ts-ignore
import { CheckoutV2GenerationInitiateCheckoutInstanceResponse } from '../models';
// @ts-ignore
import { CheckoutV2Shipping } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CheckoutV2GenerationApi - axios parameter creator
 * @export
 */
export const CheckoutV2GenerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a checkout instance for use from Embedded Checkout.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-embedded-tutorial#tutorial).  
         * @summary Initiate Checkout
         * @param {string} referer An allowlisted domain for the merchant.
         * @param {CheckoutV2} checkoutV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCheckoutInstance: async (referer: string, checkoutV2: CheckoutV2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referer' is not null or undefined
            assertParamExists('initiateCheckoutInstance', 'referer', referer)
            // verify required parameter 'checkoutV2' is not null or undefined
            assertParamExists('initiateCheckoutInstance', 'checkoutV2', checkoutV2)
            const localVarPath = `/v2/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (referer != null) {
                localVarHeaderParameter['Referer'] = String(referer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkoutV2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutV2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutV2GenerationApi - functional programming interface
 * @export
 */
export const CheckoutV2GenerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutV2GenerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a checkout instance for use from Embedded Checkout.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-embedded-tutorial#tutorial).  
         * @summary Initiate Checkout
         * @param {CheckoutV2GenerationApiInitiateCheckoutInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateCheckoutInstance(requestParameters: CheckoutV2GenerationApiInitiateCheckoutInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutV2GenerationInitiateCheckoutInstanceResponse>> {
            const checkoutV2: CheckoutV2 = {
                authentication.entityId: requestParameters.authentication.entityId,
                merchantTransactionId: requestParameters.merchantTransactionId,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                nonce: requestParameters.nonce,
                shopperResultUrl: requestParameters.shopperResultUrl,
                defaultPaymentMethod: requestParameters.defaultPaymentMethod,
                forceDefaultMethod: requestParameters.forceDefaultMethod,
                merchantInvoiceId: requestParameters.merchantInvoiceId,
                cancelUrl: requestParameters.cancelUrl,
                notificationUrl: requestParameters.notificationUrl,
                customParameters: requestParameters.customParameters,
                customer: requestParameters.customer,
                billing: requestParameters.billing,
                shipping: requestParameters.shipping,
                createRegistration: requestParameters.createRegistration,
                originator: requestParameters.originator,
                returnTo: requestParameters.returnTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateCheckoutInstance(requestParameters.referer, checkoutV2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckoutV2GenerationApi - factory interface
 * @export
 */
export const CheckoutV2GenerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutV2GenerationApiFp(configuration)
    return {
        /**
         * Create a checkout instance for use from Embedded Checkout.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-embedded-tutorial#tutorial).  
         * @summary Initiate Checkout
         * @param {CheckoutV2GenerationApiInitiateCheckoutInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCheckoutInstance(requestParameters: CheckoutV2GenerationApiInitiateCheckoutInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutV2GenerationInitiateCheckoutInstanceResponse> {
            return localVarFp.initiateCheckoutInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for initiateCheckoutInstance operation in CheckoutV2GenerationApi.
 * @export
 * @interface CheckoutV2GenerationApiInitiateCheckoutInstanceRequest
 */
export type CheckoutV2GenerationApiInitiateCheckoutInstanceRequest = {
    
    /**
    * An allowlisted domain for the merchant.
    * @type {string}
    * @memberof CheckoutV2GenerationApiInitiateCheckoutInstance
    */
    readonly referer: string
    
} & CheckoutV2

/**
 * CheckoutV2GenerationApiGenerated - object-oriented interface
 * @export
 * @class CheckoutV2GenerationApiGenerated
 * @extends {BaseAPI}
 */
export class CheckoutV2GenerationApiGenerated extends BaseAPI {
    /**
     * Create a checkout instance for use from Embedded Checkout.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-embedded-tutorial#tutorial).  
     * @summary Initiate Checkout
     * @param {CheckoutV2GenerationApiInitiateCheckoutInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutV2GenerationApiGenerated
     */
    public initiateCheckoutInstance(requestParameters: CheckoutV2GenerationApiInitiateCheckoutInstanceRequest, options?: AxiosRequestConfig) {
        return CheckoutV2GenerationApiFp(this.configuration).initiateCheckoutInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
