/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HelpersGetPaymentMethodsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HelpersApi - axios parameter creator
 * @export
 */
export const HelpersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of enabled payment methods for a channel given a particular currency.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-merchant-specs).  
         * @summary Retrieve a list of payment methods for a currency
         * @param {HelpersGetPaymentMethodsRequest} helpersGetPaymentMethodsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethods: async (helpersGetPaymentMethodsRequest: HelpersGetPaymentMethodsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'helpersGetPaymentMethodsRequest' is not null or undefined
            assertParamExists('getPaymentMethods', 'helpersGetPaymentMethodsRequest', helpersGetPaymentMethodsRequest)
            const localVarPath = `/merchant_specs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: helpersGetPaymentMethodsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/merchant_specs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(helpersGetPaymentMethodsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelpersApi - functional programming interface
 * @export
 */
export const HelpersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelpersApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of enabled payment methods for a channel given a particular currency.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-merchant-specs).  
         * @summary Retrieve a list of payment methods for a currency
         * @param {HelpersApiGetPaymentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethods(requestParameters: HelpersApiGetPaymentMethodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const helpersGetPaymentMethodsRequest: HelpersGetPaymentMethodsRequest = {
                authentication.entityId: requestParameters.authentication.entityId,
                signature: requestParameters.signature,
                currency: requestParameters.currency
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethods(helpersGetPaymentMethodsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HelpersApi - factory interface
 * @export
 */
export const HelpersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelpersApiFp(configuration)
    return {
        /**
         * Retrieve a list of enabled payment methods for a channel given a particular currency.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-merchant-specs).  
         * @summary Retrieve a list of payment methods for a currency
         * @param {HelpersApiGetPaymentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethods(requestParameters: HelpersApiGetPaymentMethodsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPaymentMethods(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPaymentMethods operation in HelpersApi.
 * @export
 * @interface HelpersApiGetPaymentMethodsRequest
 */
export type HelpersApiGetPaymentMethodsRequest = {
    
} & HelpersGetPaymentMethodsRequest

/**
 * HelpersApiGenerated - object-oriented interface
 * @export
 * @class HelpersApiGenerated
 * @extends {BaseAPI}
 */
export class HelpersApiGenerated extends BaseAPI {
    /**
     * Retrieve a list of enabled payment methods for a channel given a particular currency.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-merchant-specs).  
     * @summary Retrieve a list of payment methods for a currency
     * @param {HelpersApiGetPaymentMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpersApiGenerated
     */
    public getPaymentMethods(requestParameters: HelpersApiGetPaymentMethodsRequest, options?: AxiosRequestConfig) {
        return HelpersApiFp(this.configuration).getPaymentMethods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
