/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckoutError } from '../models';
// @ts-ignore
import { CheckoutStatus } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
// @ts-ignore
import { StatusQueryPaymentStatusResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the status of a checkout instance.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment-status). 
         * @summary Query Checkout status
         * @param {string} authenticationEntityId Merchant\&#39;s entity ID.
         * @param {string} signature Signature of data signed with secret key of merchant.
         * @param {string} [checkoutId] Checkout ID.
         * @param {string} [merchantTransactionId] Merchant transaction ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutStatusGet: async (authenticationEntityId: string, signature: string, checkoutId?: string, merchantTransactionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationEntityId' is not null or undefined
            assertParamExists('checkoutStatusGet', 'authenticationEntityId', authenticationEntityId)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('checkoutStatusGet', 'signature', signature)
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (authenticationEntityId !== undefined) {
                localVarQueryParameter['authentication.entityId'] = authenticationEntityId;
            }

            if (checkoutId !== undefined) {
                localVarQueryParameter['checkoutId'] = checkoutId;
            }

            if (merchantTransactionId !== undefined) {
                localVarQueryParameter['merchantTransactionId'] = merchantTransactionId;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the status of a payment.  For more information, see the [documentation](https://developer.peachpayments.com/docs/query-payment). 
         * @summary Query payment status
         * @param {string} paymentId Payment ID. Returned when creating a new payment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPaymentStatus: async (paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('queryPaymentStatus', 'paymentId', paymentId)
            const localVarPath = `/api/payments/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId !== undefined ? paymentId : `-paymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/payments/{paymentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the status of a checkout instance.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment-status). 
         * @summary Query Checkout status
         * @param {StatusApiCheckoutStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutStatusGet(requestParameters: StatusApiCheckoutStatusGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutStatusGet(requestParameters.authenticationEntityId, requestParameters.signature, requestParameters.checkoutId, requestParameters.merchantTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the status of a payment.  For more information, see the [documentation](https://developer.peachpayments.com/docs/query-payment). 
         * @summary Query payment status
         * @param {StatusApiQueryPaymentStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryPaymentStatus(requestParameters: StatusApiQueryPaymentStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusQueryPaymentStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryPaymentStatus(requestParameters.paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusApiFp(configuration)
    return {
        /**
         * Get the status of a checkout instance.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment-status). 
         * @summary Query Checkout status
         * @param {StatusApiCheckoutStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutStatusGet(requestParameters: StatusApiCheckoutStatusGetRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutStatus> {
            return localVarFp.checkoutStatusGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the status of a payment.  For more information, see the [documentation](https://developer.peachpayments.com/docs/query-payment). 
         * @summary Query payment status
         * @param {StatusApiQueryPaymentStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPaymentStatus(requestParameters: StatusApiQueryPaymentStatusRequest, options?: AxiosRequestConfig): AxiosPromise<StatusQueryPaymentStatusResponse> {
            return localVarFp.queryPaymentStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkoutStatusGet operation in StatusApi.
 * @export
 * @interface StatusApiCheckoutStatusGetRequest
 */
export type StatusApiCheckoutStatusGetRequest = {
    
    /**
    * Merchant\'s entity ID.
    * @type {string}
    * @memberof StatusApiCheckoutStatusGet
    */
    readonly authenticationEntityId: string
    
    /**
    * Signature of data signed with secret key of merchant.
    * @type {string}
    * @memberof StatusApiCheckoutStatusGet
    */
    readonly signature: string
    
    /**
    * Checkout ID.
    * @type {string}
    * @memberof StatusApiCheckoutStatusGet
    */
    readonly checkoutId?: string
    
    /**
    * Merchant transaction ID.
    * @type {string}
    * @memberof StatusApiCheckoutStatusGet
    */
    readonly merchantTransactionId?: string
    
}

/**
 * Request parameters for queryPaymentStatus operation in StatusApi.
 * @export
 * @interface StatusApiQueryPaymentStatusRequest
 */
export type StatusApiQueryPaymentStatusRequest = {
    
    /**
    * Payment ID. Returned when creating a new payment.
    * @type {string}
    * @memberof StatusApiQueryPaymentStatus
    */
    readonly paymentId: string
    
}

/**
 * StatusApiGenerated - object-oriented interface
 * @export
 * @class StatusApiGenerated
 * @extends {BaseAPI}
 */
export class StatusApiGenerated extends BaseAPI {
    /**
     * Get the status of a checkout instance.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment-status). 
     * @summary Query Checkout status
     * @param {StatusApiCheckoutStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiGenerated
     */
    public checkoutStatusGet(requestParameters: StatusApiCheckoutStatusGetRequest, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration).checkoutStatusGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the status of a payment.  For more information, see the [documentation](https://developer.peachpayments.com/docs/query-payment). 
     * @summary Query payment status
     * @param {StatusApiQueryPaymentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiGenerated
     */
    public queryPaymentStatus(requestParameters: StatusApiQueryPaymentStatusRequest, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration).queryPaymentStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
