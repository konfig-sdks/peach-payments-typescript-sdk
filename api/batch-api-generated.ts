/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchGenerateLinkRequest } from '../models';
// @ts-ignore
import { BatchGenerateLinkResponse } from '../models';
// @ts-ignore
import { BatchGetBatchStatusesResponse } from '../models';
// @ts-ignore
import { BatchGetErrorFilesResponse } from '../models';
// @ts-ignore
import { BatchResponse } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BatchApi - axios parameter creator
 * @export
 */
export const BatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a URL to which the batch file must be uploaded.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-bulk-payment-links). 
         * @summary Generate batch link
         * @param {string} entityId The entity for the request.
         * @param {BatchGenerateLinkRequest} batchGenerateLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLink: async (entityId: string, batchGenerateLinkRequest: BatchGenerateLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('generateLink', 'entityId', entityId)
            // verify required parameter 'batchGenerateLinkRequest' is not null or undefined
            assertParamExists('generateLink', 'batchGenerateLinkRequest', batchGenerateLinkRequest)
            const localVarPath = `/api/channels/{entityId}/payments/batches`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId !== undefined ? entityId : `-entityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: batchGenerateLinkRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/channels/{entityId}/payments/batches',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(batchGenerateLinkRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all batch statuses of a batch for a channel.
         * @summary Get all batch statuses
         * @param {string} entityId The entity for the request.
         * @param {number} [offset] The offset from which to read data.
         * @param {number} [perPage] The amount of items to retrieve.
         * @param {string} [filtersStartDate] Retrieve all batches from the start date onwards.
         * @param {string} [filtersEndDate] Retrieve all batches until the end date.
         * @param {'initiated' | 'processing' | 'expired' | 'error' | 'completed'} [filtersStatus] The payment link status to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchStatuses: async (entityId: string, offset?: number, perPage?: number, filtersStartDate?: string, filtersEndDate?: string, filtersStatus?: 'initiated' | 'processing' | 'expired' | 'error' | 'completed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('getBatchStatuses', 'entityId', entityId)
            const localVarPath = `/api/channels/{entityId}/payments/batches`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId !== undefined ? entityId : `-entityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (filtersStartDate !== undefined) {
                localVarQueryParameter['filters[startDate]'] = (filtersStartDate as any instanceof Date) ?
                    (filtersStartDate as any).toISOString() :
                    filtersStartDate;
            }

            if (filtersEndDate !== undefined) {
                localVarQueryParameter['filters[endDate]'] = (filtersEndDate as any instanceof Date) ?
                    (filtersEndDate as any).toISOString() :
                    filtersEndDate;
            }

            if (filtersStatus !== undefined) {
                localVarQueryParameter['filters[status]'] = filtersStatus;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/channels/{entityId}/payments/batches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a set of URLs that can be accessed to retrieve the batch error files.
         * @summary Get batch error files
         * @param {string} batchId The batch for the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorFiles: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('getErrorFiles', 'batchId', batchId)
            const localVarPath = `/api/batches/{batchId}/files`
                .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batchId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/batches/{batchId}/files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the status of the batch.
         * @summary Batch link status
         * @param {string} batchId The batch ID for the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkStatusGet: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('linkStatusGet', 'batchId', batchId)
            const localVarPath = `/api/batches/{batchId}`
                .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batchId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/batches/{batchId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApi - functional programming interface
 * @export
 */
export const BatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a URL to which the batch file must be uploaded.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-bulk-payment-links). 
         * @summary Generate batch link
         * @param {BatchApiGenerateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateLink(requestParameters: BatchApiGenerateLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchGenerateLinkResponse>> {
            const batchGenerateLinkRequest: BatchGenerateLinkRequest = {
                filename: requestParameters.filename,
                notificationUrl: requestParameters.notificationUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateLink(requestParameters.entityId, batchGenerateLinkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query all batch statuses of a batch for a channel.
         * @summary Get all batch statuses
         * @param {BatchApiGetBatchStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchStatuses(requestParameters: BatchApiGetBatchStatusesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchGetBatchStatusesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBatchStatuses(requestParameters.entityId, requestParameters.offset, requestParameters.perPage, requestParameters.filtersStartDate, requestParameters.filtersEndDate, requestParameters.filtersStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a set of URLs that can be accessed to retrieve the batch error files.
         * @summary Get batch error files
         * @param {BatchApiGetErrorFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErrorFiles(requestParameters: BatchApiGetErrorFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchGetErrorFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getErrorFiles(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the status of the batch.
         * @summary Batch link status
         * @param {BatchApiLinkStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkStatusGet(requestParameters: BatchApiLinkStatusGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkStatusGet(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchApi - factory interface
 * @export
 */
export const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchApiFp(configuration)
    return {
        /**
         * Returns a URL to which the batch file must be uploaded.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-bulk-payment-links). 
         * @summary Generate batch link
         * @param {BatchApiGenerateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLink(requestParameters: BatchApiGenerateLinkRequest, options?: AxiosRequestConfig): AxiosPromise<BatchGenerateLinkResponse> {
            return localVarFp.generateLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all batch statuses of a batch for a channel.
         * @summary Get all batch statuses
         * @param {BatchApiGetBatchStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchStatuses(requestParameters: BatchApiGetBatchStatusesRequest, options?: AxiosRequestConfig): AxiosPromise<BatchGetBatchStatusesResponse> {
            return localVarFp.getBatchStatuses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a set of URLs that can be accessed to retrieve the batch error files.
         * @summary Get batch error files
         * @param {BatchApiGetErrorFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorFiles(requestParameters: BatchApiGetErrorFilesRequest, options?: AxiosRequestConfig): AxiosPromise<BatchGetErrorFilesResponse> {
            return localVarFp.getErrorFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the status of the batch.
         * @summary Batch link status
         * @param {BatchApiLinkStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkStatusGet(requestParameters: BatchApiLinkStatusGetRequest, options?: AxiosRequestConfig): AxiosPromise<BatchResponse> {
            return localVarFp.linkStatusGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateLink operation in BatchApi.
 * @export
 * @interface BatchApiGenerateLinkRequest
 */
export type BatchApiGenerateLinkRequest = {
    
    /**
    * The entity for the request.
    * @type {string}
    * @memberof BatchApiGenerateLink
    */
    readonly entityId: string
    
} & BatchGenerateLinkRequest

/**
 * Request parameters for getBatchStatuses operation in BatchApi.
 * @export
 * @interface BatchApiGetBatchStatusesRequest
 */
export type BatchApiGetBatchStatusesRequest = {
    
    /**
    * The entity for the request.
    * @type {string}
    * @memberof BatchApiGetBatchStatuses
    */
    readonly entityId: string
    
    /**
    * The offset from which to read data.
    * @type {number}
    * @memberof BatchApiGetBatchStatuses
    */
    readonly offset?: number
    
    /**
    * The amount of items to retrieve.
    * @type {number}
    * @memberof BatchApiGetBatchStatuses
    */
    readonly perPage?: number
    
    /**
    * Retrieve all batches from the start date onwards.
    * @type {string}
    * @memberof BatchApiGetBatchStatuses
    */
    readonly filtersStartDate?: string
    
    /**
    * Retrieve all batches until the end date.
    * @type {string}
    * @memberof BatchApiGetBatchStatuses
    */
    readonly filtersEndDate?: string
    
    /**
    * The payment link status to filter on.
    * @type {'initiated' | 'processing' | 'expired' | 'error' | 'completed'}
    * @memberof BatchApiGetBatchStatuses
    */
    readonly filtersStatus?: 'initiated' | 'processing' | 'expired' | 'error' | 'completed'
    
}

/**
 * Request parameters for getErrorFiles operation in BatchApi.
 * @export
 * @interface BatchApiGetErrorFilesRequest
 */
export type BatchApiGetErrorFilesRequest = {
    
    /**
    * The batch for the request.
    * @type {string}
    * @memberof BatchApiGetErrorFiles
    */
    readonly batchId: string
    
}

/**
 * Request parameters for linkStatusGet operation in BatchApi.
 * @export
 * @interface BatchApiLinkStatusGetRequest
 */
export type BatchApiLinkStatusGetRequest = {
    
    /**
    * The batch ID for the request.
    * @type {string}
    * @memberof BatchApiLinkStatusGet
    */
    readonly batchId: string
    
}

/**
 * BatchApiGenerated - object-oriented interface
 * @export
 * @class BatchApiGenerated
 * @extends {BaseAPI}
 */
export class BatchApiGenerated extends BaseAPI {
    /**
     * Returns a URL to which the batch file must be uploaded.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-bulk-payment-links). 
     * @summary Generate batch link
     * @param {BatchApiGenerateLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiGenerated
     */
    public generateLink(requestParameters: BatchApiGenerateLinkRequest, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).generateLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all batch statuses of a batch for a channel.
     * @summary Get all batch statuses
     * @param {BatchApiGetBatchStatusesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiGenerated
     */
    public getBatchStatuses(requestParameters: BatchApiGetBatchStatusesRequest, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).getBatchStatuses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a set of URLs that can be accessed to retrieve the batch error files.
     * @summary Get batch error files
     * @param {BatchApiGetErrorFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiGenerated
     */
    public getErrorFiles(requestParameters: BatchApiGetErrorFilesRequest, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).getErrorFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the status of the batch.
     * @summary Batch link status
     * @param {BatchApiLinkStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiGenerated
     */
    public linkStatusGet(requestParameters: BatchApiLinkStatusGetRequest, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).linkStatusGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
