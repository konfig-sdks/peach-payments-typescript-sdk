/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Checkout } from '../models';
// @ts-ignore
import { CheckoutGenerationInitiateRedirectCheckoutResponse } from '../models';
// @ts-ignore
import { CheckoutGenerationValidateRequestResponse } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CheckoutGenerationApi - axios parameter creator
 * @export
 */
export const CheckoutGenerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Load the Checkout frontend to complete a payment. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends.  Sign the data on the backend and execute the POST from the browser.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#form-post-checkout). 
         * @summary Initiate Checkout
         * @param {string} referer An allowlisted domain for the merchant.
         * @param {string} authenticationEntityId The entity for the request. By default, this is the channel ID.
         * @param {string} signature Token to verify the integrity of the payment, ensuring that only the merchant sending the request is accepted.
         * @param {string} merchantTransactionId Merchant-provided reference number unique for your transactions.
         * @param {string} amount The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up.
         * @param {string} paymentType The payment type for the request. Accepts &#x60;DB&#x60;.  Does not accept &#x60;RG&#x60;, but you can tokenise a card by performing a DB with &#x60;createRegistration&#x60;.  Refund transactions through the Dashboard or as described in the &lt;a href&#x3D;\\\&quot;https://developer.peachpayments.com/docs/checkout-refund\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;documentation&lt;/a&gt;. 
         * @param {string} currency The currency code of the payment request amount.
         * @param {string} nonce Unique value to represent each request.
         * @param {string} shopperResultUrl Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser.
         * @param {Checkout} checkout 
         * @param {string} [defaultPaymentMethod] The preferred payment method which is active in the checkout page at the point of redirecting.
         * @param {string} [forceDefaultMethod] Force the default payment method to be the only payment method.
         * @param {string} [merchantInvoiceId] Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards.
         * @param {string} [cancelUrl] The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser.
         * @param {string} [notificationUrl] Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url.
         * @param {string} [customParametersName] A name value pair used for sending custom information.
         * @param {string} [customerMerchantCustomerId] An identifier for this customer. Typically this is the ID that identifies the shopper in the shop\\\&#39;s system.
         * @param {string} [customerGivenName] The customer\\\&#39;s first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. 
         * @param {string} [customerSurname] The customer\\\&#39;s last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. 
         * @param {string} [customerMobile] The customer\\\&#39;s mobile number.
         * @param {string} [customerEmail] The customer\\\&#39;s email address.
         * @param {string} [customerStatus] The customer\\\&#39;s status. Accepts &#x60;NEW&#x60; or &#x60;EXISTING&#x60;.
         * @param {string} [customerBirthDate] The customer\\\&#39;s birth date in the yyyy-MM-dd format.
         * @param {string} [customerIp] The customer\\\&#39;s IP address.
         * @param {string} [customerPhone] The customer\\\&#39;s phone number.
         * @param {string} [customerIdNumber] The customer\\\&#39;s ID number, required for high-risk merchants supporting Capitec Pay.
         * @param {string} [billingStreet1] The door number, floor, building number, building name, and/or street name of the billing address.
         * @param {string} [billingStreet2] The adjoining road or locality, if required, of the billing address.
         * @param {string} [billingCity] The town, district, or city of the billing address.
         * @param {string} [billingCompany] The company of the billing address.
         * @param {string} [billingCountry] The country of the billing address (ISO 3166-1).
         * @param {string} [billingState] The county, state, or region of the billing address.
         * @param {string} [billingPostcode] The postal code or ZIP code of the billing address.
         * @param {string} [shippingStreet1] The door number, floor, building number, building name, and/or street name of the shipping address.
         * @param {string} [shippingStreet2] The adjoining road or locality, if required, of the shipping address.
         * @param {string} [shippingCity] The town, district, or city of the shipping address.
         * @param {string} [shippingCompany] The company of the shipping address.
         * @param {string} [shippingPostcode] The postal code or ZIP code of the shipping address.
         * @param {string} [shippingCountry] The country of the shipping address (ISO 3166-1).
         * @param {string} [shippingState] The county, state, or region of the shipping address.
         * @param {string} [cartTax] The tax percentage applied to the price of the item in the shopping cart.
         * @param {string} [cartShippingAmount] The total amount of the cart item including quantity.
         * @param {string} [cartDiscount] Discount amount applied on order amount.
         * @param {string} [createRegistration] Used to enable card tokenisation with COPYandPAY.
         * @param {string} [originator] Used to provide a name for the application that is creating the checkout instance.
         * @param {string} [returnTo] Text to display on \\\&quot;Return to Store\\\&quot; button on completing checkout.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiatePayment: async (referer: string, authenticationEntityId: string, signature: string, merchantTransactionId: string, amount: string, paymentType: string, currency: string, nonce: string, shopperResultUrl: string, checkout: Checkout, defaultPaymentMethod?: string, forceDefaultMethod?: string, merchantInvoiceId?: string, cancelUrl?: string, notificationUrl?: string, customParametersName?: string, customerMerchantCustomerId?: string, customerGivenName?: string, customerSurname?: string, customerMobile?: string, customerEmail?: string, customerStatus?: string, customerBirthDate?: string, customerIp?: string, customerPhone?: string, customerIdNumber?: string, billingStreet1?: string, billingStreet2?: string, billingCity?: string, billingCompany?: string, billingCountry?: string, billingState?: string, billingPostcode?: string, shippingStreet1?: string, shippingStreet2?: string, shippingCity?: string, shippingCompany?: string, shippingPostcode?: string, shippingCountry?: string, shippingState?: string, cartTax?: string, cartShippingAmount?: string, cartDiscount?: string, createRegistration?: string, originator?: string, returnTo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referer' is not null or undefined
            assertParamExists('initiatePayment', 'referer', referer)
            // verify required parameter 'authenticationEntityId' is not null or undefined
            assertParamExists('initiatePayment', 'authenticationEntityId', authenticationEntityId)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('initiatePayment', 'signature', signature)
            // verify required parameter 'merchantTransactionId' is not null or undefined
            assertParamExists('initiatePayment', 'merchantTransactionId', merchantTransactionId)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('initiatePayment', 'amount', amount)
            // verify required parameter 'paymentType' is not null or undefined
            assertParamExists('initiatePayment', 'paymentType', paymentType)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('initiatePayment', 'currency', currency)
            // verify required parameter 'nonce' is not null or undefined
            assertParamExists('initiatePayment', 'nonce', nonce)
            // verify required parameter 'shopperResultUrl' is not null or undefined
            assertParamExists('initiatePayment', 'shopperResultUrl', shopperResultUrl)
            // verify required parameter 'checkout' is not null or undefined
            assertParamExists('initiatePayment', 'checkout', checkout)
            const localVarPath = `/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (referer != null) {
                localVarHeaderParameter['Referer'] = String(referer);
            }


            if (authenticationEntityId !== undefined) {
                await addFormParam('authentication.entityId', authenticationEntityId, false, true)
            }
    
            if (signature !== undefined) {
                await addFormParam('signature', signature, false, true)
            }
    
            if (merchantTransactionId !== undefined) {
                await addFormParam('merchantTransactionId', merchantTransactionId, false, true)
            }
    
            if (amount !== undefined) {
                await addFormParam('amount', amount, false, true)
            }
    
            if (paymentType !== undefined) {
                await addFormParam('paymentType', paymentType, false, true)
            }
    
            if (currency !== undefined) {
                await addFormParam('currency', currency, false, true)
            }
    
            if (nonce !== undefined) {
                await addFormParam('nonce', nonce, false, true)
            }
    
            if (shopperResultUrl !== undefined) {
                await addFormParam('shopperResultUrl', shopperResultUrl, false, true)
            }
    
            if (defaultPaymentMethod !== undefined) {
                await addFormParam('defaultPaymentMethod', defaultPaymentMethod, false, true)
            }
    
            if (forceDefaultMethod !== undefined) {
                await addFormParam('forceDefaultMethod', forceDefaultMethod, false, true)
            }
    
            if (merchantInvoiceId !== undefined) {
                await addFormParam('merchantInvoiceId', merchantInvoiceId, false, true)
            }
    
            if (cancelUrl !== undefined) {
                await addFormParam('cancelUrl', cancelUrl, false, true)
            }
    
            if (notificationUrl !== undefined) {
                await addFormParam('notificationUrl', notificationUrl, false, true)
            }
    
            if (customParametersName !== undefined) {
                await addFormParam('customParameters[name]', customParametersName, false, true)
            }
    
            if (customerMerchantCustomerId !== undefined) {
                await addFormParam('customer.merchantCustomerId', customerMerchantCustomerId, false, true)
            }
    
            if (customerGivenName !== undefined) {
                await addFormParam('customer.givenName', customerGivenName, false, true)
            }
    
            if (customerSurname !== undefined) {
                await addFormParam('customer.surname', customerSurname, false, true)
            }
    
            if (customerMobile !== undefined) {
                await addFormParam('customer.mobile', customerMobile, false, true)
            }
    
            if (customerEmail !== undefined) {
                await addFormParam('customer.email', customerEmail, false, true)
            }
    
            if (customerStatus !== undefined) {
                await addFormParam('customer.status', customerStatus, false, true)
            }
    
            if (customerBirthDate !== undefined) {
                await addFormParam('customer.birthDate', customerBirthDate, false, true)
            }
    
            if (customerIp !== undefined) {
                await addFormParam('customer.ip', customerIp, false, true)
            }
    
            if (customerPhone !== undefined) {
                await addFormParam('customer.phone', customerPhone, false, true)
            }
    
            if (customerIdNumber !== undefined) {
                await addFormParam('customer.idNumber', customerIdNumber, false, true)
            }
    
            if (billingStreet1 !== undefined) {
                await addFormParam('billing.street1', billingStreet1, false, true)
            }
    
            if (billingStreet2 !== undefined) {
                await addFormParam('billing.street2', billingStreet2, false, true)
            }
    
            if (billingCity !== undefined) {
                await addFormParam('billing.city', billingCity, false, true)
            }
    
            if (billingCompany !== undefined) {
                await addFormParam('billing.company', billingCompany, false, true)
            }
    
            if (billingCountry !== undefined) {
                await addFormParam('billing.country', billingCountry, false, true)
            }
    
            if (billingState !== undefined) {
                await addFormParam('billing.state', billingState, false, true)
            }
    
            if (billingPostcode !== undefined) {
                await addFormParam('billing.postcode', billingPostcode, false, true)
            }
    
            if (shippingStreet1 !== undefined) {
                await addFormParam('shipping.street1', shippingStreet1, false, true)
            }
    
            if (shippingStreet2 !== undefined) {
                await addFormParam('shipping.street2', shippingStreet2, false, true)
            }
    
            if (shippingCity !== undefined) {
                await addFormParam('shipping.city', shippingCity, false, true)
            }
    
            if (shippingCompany !== undefined) {
                await addFormParam('shipping.company', shippingCompany, false, true)
            }
    
            if (shippingPostcode !== undefined) {
                await addFormParam('shipping.postcode', shippingPostcode, false, true)
            }
    
            if (shippingCountry !== undefined) {
                await addFormParam('shipping.country', shippingCountry, false, true)
            }
    
            if (shippingState !== undefined) {
                await addFormParam('shipping.state', shippingState, false, true)
            }
    
            if (cartTax !== undefined) {
                await addFormParam('cart.tax', cartTax, false, true)
            }
    
            if (cartShippingAmount !== undefined) {
                await addFormParam('cart.shippingAmount', cartShippingAmount, false, true)
            }
    
            if (cartDiscount !== undefined) {
                await addFormParam('cart.discount', cartDiscount, false, true)
            }
    
            if (createRegistration !== undefined) {
                await addFormParam('createRegistration', createRegistration, false, true)
            }
    
            if (originator !== undefined) {
                await addFormParam('originator', originator, false, true)
            }
    
            if (returnTo !== undefined) {
                await addFormParam('returnTo', returnTo, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkout,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checkout',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkout, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide a redirect URL to the caller to redirect the user into the Checkout experience. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends. This allows the checkout instance to be created from a backend without requiring a \"form post\", or other similar method, from the frontend.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#redirect-based-checkout). 
         * @summary Initiate redirect-based Checkout
         * @param {string} referer An allowlisted domain for the merchant.
         * @param {Checkout} checkout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateRedirectCheckout: async (referer: string, checkout: Checkout, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referer' is not null or undefined
            assertParamExists('initiateRedirectCheckout', 'referer', referer)
            // verify required parameter 'checkout' is not null or undefined
            assertParamExists('initiateRedirectCheckout', 'checkout', checkout)
            const localVarPath = `/checkout/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (referer != null) {
                localVarHeaderParameter['Referer'] = String(referer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkout,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checkout/initiate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkout, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a request before trying to initiate a checkout session.
         * @summary Validate Checkout request
         * @param {string} referer An allowlisted domain for the merchant.
         * @param {Checkout} checkout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateRequest: async (referer: string, checkout: Checkout, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referer' is not null or undefined
            assertParamExists('validateRequest', 'referer', referer)
            // verify required parameter 'checkout' is not null or undefined
            assertParamExists('validateRequest', 'checkout', checkout)
            const localVarPath = `/checkout/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (referer != null) {
                localVarHeaderParameter['Referer'] = String(referer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkout,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checkout/validate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkout, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutGenerationApi - functional programming interface
 * @export
 */
export const CheckoutGenerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutGenerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Load the Checkout frontend to complete a payment. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends.  Sign the data on the backend and execute the POST from the browser.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#form-post-checkout). 
         * @summary Initiate Checkout
         * @param {CheckoutGenerationApiInitiatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiatePayment(requestParameters: CheckoutGenerationApiInitiatePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const checkout: Checkout = {
                authentication.entityId: requestParameters.authentication.entityId,
                signature: requestParameters.signature,
                merchantTransactionId: requestParameters.merchantTransactionId,
                amount: requestParameters.amount,
                paymentType: requestParameters.paymentType,
                currency: requestParameters.currency,
                nonce: requestParameters.nonce,
                shopperResultUrl: requestParameters.shopperResultUrl,
                defaultPaymentMethod: requestParameters.defaultPaymentMethod,
                forceDefaultMethod: requestParameters.forceDefaultMethod,
                merchantInvoiceId: requestParameters.merchantInvoiceId,
                cancelUrl: requestParameters.cancelUrl,
                notificationUrl: requestParameters.notificationUrl,
                customParameters[name]: requestParameters.customParameters[name],
                customer.merchantCustomerId: requestParameters.customer.merchantCustomerId,
                customer.givenName: requestParameters.customer.givenName,
                customer.surname: requestParameters.customer.surname,
                customer.mobile: requestParameters.customer.mobile,
                customer.email: requestParameters.customer.email,
                customer.status: requestParameters.customer.status,
                customer.birthDate: requestParameters.customer.birthDate,
                customer.ip: requestParameters.customer.ip,
                customer.phone: requestParameters.customer.phone,
                customer.idNumber: requestParameters.customer.idNumber,
                billing.street1: requestParameters.billing.street1,
                billing.street2: requestParameters.billing.street2,
                billing.city: requestParameters.billing.city,
                billing.company: requestParameters.billing.company,
                billing.country: requestParameters.billing.country,
                billing.state: requestParameters.billing.state,
                billing.postcode: requestParameters.billing.postcode,
                shipping.street1: requestParameters.shipping.street1,
                shipping.street2: requestParameters.shipping.street2,
                shipping.city: requestParameters.shipping.city,
                shipping.company: requestParameters.shipping.company,
                shipping.postcode: requestParameters.shipping.postcode,
                shipping.country: requestParameters.shipping.country,
                shipping.state: requestParameters.shipping.state,
                cart.tax: requestParameters.cart.tax,
                cart.shippingAmount: requestParameters.cart.shippingAmount,
                cart.discount: requestParameters.cart.discount,
                createRegistration: requestParameters.createRegistration,
                originator: requestParameters.originator,
                returnTo: requestParameters.returnTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiatePayment(requestParameters.referer, requestParameters.authenticationEntityId, requestParameters.signature, requestParameters.merchantTransactionId, requestParameters.amount, requestParameters.paymentType, requestParameters.currency, requestParameters.nonce, requestParameters.shopperResultUrl, checkout, requestParameters.defaultPaymentMethod, requestParameters.forceDefaultMethod, requestParameters.merchantInvoiceId, requestParameters.cancelUrl, requestParameters.notificationUrl, requestParameters.customParametersName, requestParameters.customerMerchantCustomerId, requestParameters.customerGivenName, requestParameters.customerSurname, requestParameters.customerMobile, requestParameters.customerEmail, requestParameters.customerStatus, requestParameters.customerBirthDate, requestParameters.customerIp, requestParameters.customerPhone, requestParameters.customerIdNumber, requestParameters.billingStreet1, requestParameters.billingStreet2, requestParameters.billingCity, requestParameters.billingCompany, requestParameters.billingCountry, requestParameters.billingState, requestParameters.billingPostcode, requestParameters.shippingStreet1, requestParameters.shippingStreet2, requestParameters.shippingCity, requestParameters.shippingCompany, requestParameters.shippingPostcode, requestParameters.shippingCountry, requestParameters.shippingState, requestParameters.cartTax, requestParameters.cartShippingAmount, requestParameters.cartDiscount, requestParameters.createRegistration, requestParameters.originator, requestParameters.returnTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provide a redirect URL to the caller to redirect the user into the Checkout experience. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends. This allows the checkout instance to be created from a backend without requiring a \"form post\", or other similar method, from the frontend.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#redirect-based-checkout). 
         * @summary Initiate redirect-based Checkout
         * @param {CheckoutGenerationApiInitiateRedirectCheckoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateRedirectCheckout(requestParameters: CheckoutGenerationApiInitiateRedirectCheckoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutGenerationInitiateRedirectCheckoutResponse>> {
            const checkout: Checkout = {
                authentication.entityId: requestParameters.authentication.entityId,
                signature: requestParameters.signature,
                merchantTransactionId: requestParameters.merchantTransactionId,
                amount: requestParameters.amount,
                paymentType: requestParameters.paymentType,
                currency: requestParameters.currency,
                nonce: requestParameters.nonce,
                shopperResultUrl: requestParameters.shopperResultUrl,
                defaultPaymentMethod: requestParameters.defaultPaymentMethod,
                forceDefaultMethod: requestParameters.forceDefaultMethod,
                merchantInvoiceId: requestParameters.merchantInvoiceId,
                cancelUrl: requestParameters.cancelUrl,
                notificationUrl: requestParameters.notificationUrl,
                customParameters[name]: requestParameters.customParameters[name],
                customer.merchantCustomerId: requestParameters.customer.merchantCustomerId,
                customer.givenName: requestParameters.customer.givenName,
                customer.surname: requestParameters.customer.surname,
                customer.mobile: requestParameters.customer.mobile,
                customer.email: requestParameters.customer.email,
                customer.status: requestParameters.customer.status,
                customer.birthDate: requestParameters.customer.birthDate,
                customer.ip: requestParameters.customer.ip,
                customer.phone: requestParameters.customer.phone,
                customer.idNumber: requestParameters.customer.idNumber,
                billing.street1: requestParameters.billing.street1,
                billing.street2: requestParameters.billing.street2,
                billing.city: requestParameters.billing.city,
                billing.company: requestParameters.billing.company,
                billing.country: requestParameters.billing.country,
                billing.state: requestParameters.billing.state,
                billing.postcode: requestParameters.billing.postcode,
                shipping.street1: requestParameters.shipping.street1,
                shipping.street2: requestParameters.shipping.street2,
                shipping.city: requestParameters.shipping.city,
                shipping.company: requestParameters.shipping.company,
                shipping.postcode: requestParameters.shipping.postcode,
                shipping.country: requestParameters.shipping.country,
                shipping.state: requestParameters.shipping.state,
                cart.tax: requestParameters.cart.tax,
                cart.shippingAmount: requestParameters.cart.shippingAmount,
                cart.discount: requestParameters.cart.discount,
                createRegistration: requestParameters.createRegistration,
                originator: requestParameters.originator,
                returnTo: requestParameters.returnTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateRedirectCheckout(requestParameters.referer, checkout, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validate a request before trying to initiate a checkout session.
         * @summary Validate Checkout request
         * @param {CheckoutGenerationApiValidateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateRequest(requestParameters: CheckoutGenerationApiValidateRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const checkout: Checkout = {
                authentication.entityId: requestParameters.authentication.entityId,
                signature: requestParameters.signature,
                merchantTransactionId: requestParameters.merchantTransactionId,
                amount: requestParameters.amount,
                paymentType: requestParameters.paymentType,
                currency: requestParameters.currency,
                nonce: requestParameters.nonce,
                shopperResultUrl: requestParameters.shopperResultUrl,
                defaultPaymentMethod: requestParameters.defaultPaymentMethod,
                forceDefaultMethod: requestParameters.forceDefaultMethod,
                merchantInvoiceId: requestParameters.merchantInvoiceId,
                cancelUrl: requestParameters.cancelUrl,
                notificationUrl: requestParameters.notificationUrl,
                customParameters[name]: requestParameters.customParameters[name],
                customer.merchantCustomerId: requestParameters.customer.merchantCustomerId,
                customer.givenName: requestParameters.customer.givenName,
                customer.surname: requestParameters.customer.surname,
                customer.mobile: requestParameters.customer.mobile,
                customer.email: requestParameters.customer.email,
                customer.status: requestParameters.customer.status,
                customer.birthDate: requestParameters.customer.birthDate,
                customer.ip: requestParameters.customer.ip,
                customer.phone: requestParameters.customer.phone,
                customer.idNumber: requestParameters.customer.idNumber,
                billing.street1: requestParameters.billing.street1,
                billing.street2: requestParameters.billing.street2,
                billing.city: requestParameters.billing.city,
                billing.company: requestParameters.billing.company,
                billing.country: requestParameters.billing.country,
                billing.state: requestParameters.billing.state,
                billing.postcode: requestParameters.billing.postcode,
                shipping.street1: requestParameters.shipping.street1,
                shipping.street2: requestParameters.shipping.street2,
                shipping.city: requestParameters.shipping.city,
                shipping.company: requestParameters.shipping.company,
                shipping.postcode: requestParameters.shipping.postcode,
                shipping.country: requestParameters.shipping.country,
                shipping.state: requestParameters.shipping.state,
                cart.tax: requestParameters.cart.tax,
                cart.shippingAmount: requestParameters.cart.shippingAmount,
                cart.discount: requestParameters.cart.discount,
                createRegistration: requestParameters.createRegistration,
                originator: requestParameters.originator,
                returnTo: requestParameters.returnTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateRequest(requestParameters.referer, checkout, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckoutGenerationApi - factory interface
 * @export
 */
export const CheckoutGenerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutGenerationApiFp(configuration)
    return {
        /**
         * Load the Checkout frontend to complete a payment. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends.  Sign the data on the backend and execute the POST from the browser.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#form-post-checkout). 
         * @summary Initiate Checkout
         * @param {CheckoutGenerationApiInitiatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiatePayment(requestParameters: CheckoutGenerationApiInitiatePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.initiatePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide a redirect URL to the caller to redirect the user into the Checkout experience. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends. This allows the checkout instance to be created from a backend without requiring a \"form post\", or other similar method, from the frontend.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#redirect-based-checkout). 
         * @summary Initiate redirect-based Checkout
         * @param {CheckoutGenerationApiInitiateRedirectCheckoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateRedirectCheckout(requestParameters: CheckoutGenerationApiInitiateRedirectCheckoutRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutGenerationInitiateRedirectCheckoutResponse> {
            return localVarFp.initiateRedirectCheckout(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a request before trying to initiate a checkout session.
         * @summary Validate Checkout request
         * @param {CheckoutGenerationApiValidateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateRequest(requestParameters: CheckoutGenerationApiValidateRequestRequest, options?: AxiosRequestConfig): AxiosPromise<MessageResponse> {
            return localVarFp.validateRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for initiatePayment operation in CheckoutGenerationApi.
 * @export
 * @interface CheckoutGenerationApiInitiatePaymentRequest
 */
export type CheckoutGenerationApiInitiatePaymentRequest = {
    
    /**
    * An allowlisted domain for the merchant.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly referer: string
    
    /**
    * The entity for the request. By default, this is the channel ID.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly authenticationEntityId: string
    
    /**
    * Token to verify the integrity of the payment, ensuring that only the merchant sending the request is accepted.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly signature: string
    
    /**
    * Merchant-provided reference number unique for your transactions.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly merchantTransactionId: string
    
    /**
    * The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly amount: string
    
    /**
    * The payment type for the request. Accepts `DB`.  Does not accept `RG`, but you can tokenise a card by performing a DB with `createRegistration`.  Refund transactions through the Dashboard or as described in the <a href=\\\"https://developer.peachpayments.com/docs/checkout-refund\\\" target=\\\"_blank\\\">documentation</a>. 
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly paymentType: string
    
    /**
    * The currency code of the payment request amount.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly currency: string
    
    /**
    * Unique value to represent each request.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly nonce: string
    
    /**
    * Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shopperResultUrl: string
    
    /**
    * The preferred payment method which is active in the checkout page at the point of redirecting.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly defaultPaymentMethod?: string
    
    /**
    * Force the default payment method to be the only payment method.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly forceDefaultMethod?: string
    
    /**
    * Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly merchantInvoiceId?: string
    
    /**
    * The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly cancelUrl?: string
    
    /**
    * Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly notificationUrl?: string
    
    /**
    * A name value pair used for sending custom information.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customParametersName?: string
    
    /**
    * An identifier for this customer. Typically this is the ID that identifies the shopper in the shop\\\'s system.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerMerchantCustomerId?: string
    
    /**
    * The customer\\\'s first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. 
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerGivenName?: string
    
    /**
    * The customer\\\'s last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. 
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerSurname?: string
    
    /**
    * The customer\\\'s mobile number.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerMobile?: string
    
    /**
    * The customer\\\'s email address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerEmail?: string
    
    /**
    * The customer\\\'s status. Accepts `NEW` or `EXISTING`.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerStatus?: string
    
    /**
    * The customer\\\'s birth date in the yyyy-MM-dd format.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerBirthDate?: string
    
    /**
    * The customer\\\'s IP address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerIp?: string
    
    /**
    * The customer\\\'s phone number.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerPhone?: string
    
    /**
    * The customer\\\'s ID number, required for high-risk merchants supporting Capitec Pay.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly customerIdNumber?: string
    
    /**
    * The door number, floor, building number, building name, and/or street name of the billing address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingStreet1?: string
    
    /**
    * The adjoining road or locality, if required, of the billing address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingStreet2?: string
    
    /**
    * The town, district, or city of the billing address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingCity?: string
    
    /**
    * The company of the billing address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingCompany?: string
    
    /**
    * The country of the billing address (ISO 3166-1).
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingCountry?: string
    
    /**
    * The county, state, or region of the billing address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingState?: string
    
    /**
    * The postal code or ZIP code of the billing address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly billingPostcode?: string
    
    /**
    * The door number, floor, building number, building name, and/or street name of the shipping address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingStreet1?: string
    
    /**
    * The adjoining road or locality, if required, of the shipping address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingStreet2?: string
    
    /**
    * The town, district, or city of the shipping address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingCity?: string
    
    /**
    * The company of the shipping address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingCompany?: string
    
    /**
    * The postal code or ZIP code of the shipping address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingPostcode?: string
    
    /**
    * The country of the shipping address (ISO 3166-1).
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingCountry?: string
    
    /**
    * The county, state, or region of the shipping address.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly shippingState?: string
    
    /**
    * The tax percentage applied to the price of the item in the shopping cart.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly cartTax?: string
    
    /**
    * The total amount of the cart item including quantity.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly cartShippingAmount?: string
    
    /**
    * Discount amount applied on order amount.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly cartDiscount?: string
    
    /**
    * Used to enable card tokenisation with COPYandPAY.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly createRegistration?: string
    
    /**
    * Used to provide a name for the application that is creating the checkout instance.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly originator?: string
    
    /**
    * Text to display on \\\"Return to Store\\\" button on completing checkout.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiatePayment
    */
    readonly returnTo?: string
    
} & Checkout

/**
 * Request parameters for initiateRedirectCheckout operation in CheckoutGenerationApi.
 * @export
 * @interface CheckoutGenerationApiInitiateRedirectCheckoutRequest
 */
export type CheckoutGenerationApiInitiateRedirectCheckoutRequest = {
    
    /**
    * An allowlisted domain for the merchant.
    * @type {string}
    * @memberof CheckoutGenerationApiInitiateRedirectCheckout
    */
    readonly referer: string
    
} & Checkout

/**
 * Request parameters for validateRequest operation in CheckoutGenerationApi.
 * @export
 * @interface CheckoutGenerationApiValidateRequestRequest
 */
export type CheckoutGenerationApiValidateRequestRequest = {
    
    /**
    * An allowlisted domain for the merchant.
    * @type {string}
    * @memberof CheckoutGenerationApiValidateRequest
    */
    readonly referer: string
    
} & Checkout

/**
 * CheckoutGenerationApiGenerated - object-oriented interface
 * @export
 * @class CheckoutGenerationApiGenerated
 * @extends {BaseAPI}
 */
export class CheckoutGenerationApiGenerated extends BaseAPI {
    /**
     * Load the Checkout frontend to complete a payment. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends.  Sign the data on the backend and execute the POST from the browser.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#form-post-checkout). 
     * @summary Initiate Checkout
     * @param {CheckoutGenerationApiInitiatePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutGenerationApiGenerated
     */
    public initiatePayment(requestParameters: CheckoutGenerationApiInitiatePaymentRequest, options?: AxiosRequestConfig) {
        return CheckoutGenerationApiFp(this.configuration).initiatePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide a redirect URL to the caller to redirect the user into the Checkout experience. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends. This allows the checkout instance to be created from a backend without requiring a \"form post\", or other similar method, from the frontend.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#redirect-based-checkout). 
     * @summary Initiate redirect-based Checkout
     * @param {CheckoutGenerationApiInitiateRedirectCheckoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutGenerationApiGenerated
     */
    public initiateRedirectCheckout(requestParameters: CheckoutGenerationApiInitiateRedirectCheckoutRequest, options?: AxiosRequestConfig) {
        return CheckoutGenerationApiFp(this.configuration).initiateRedirectCheckout(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate a request before trying to initiate a checkout session.
     * @summary Validate Checkout request
     * @param {CheckoutGenerationApiValidateRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutGenerationApiGenerated
     */
    public validateRequest(requestParameters: CheckoutGenerationApiValidateRequestRequest, options?: AxiosRequestConfig) {
        return CheckoutGenerationApiFp(this.configuration).validateRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
