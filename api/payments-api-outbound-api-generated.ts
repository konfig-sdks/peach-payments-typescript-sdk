/* tslint:disable */
/* eslint-disable */
/*
Payments API inbound

The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

The version of the OpenAPI document: 2.0.0
Contact: support@peachpayments.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JSONMerchantWebhook } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentsApiOutboundApi - axios parameter creator
 * @export
 */
export const PaymentsApiOutboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Encrypted and decrypted webhook sent to merchant - retries if response HTTP status code is not 200.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#webhook-flow). 
         * @summary Merchant webhook
         * @param {string} [xInitializationVector] 
         * @param {string} [xAuthenticationTag] 
         * @param {JSONMerchantWebhook} [jSONMerchantWebhook] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhook: async (xInitializationVector?: string, xAuthenticationTag?: string, jSONMerchantWebhook?: JSONMerchantWebhook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xInitializationVector != null) {
                localVarHeaderParameter['X-Initialization-Vector'] = String(xInitializationVector);
            }

            if (xAuthenticationTag != null) {
                localVarHeaderParameter['X-Authentication-Tag'] = String(xAuthenticationTag);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jSONMerchantWebhook,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jSONMerchantWebhook, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApiOutboundApi - functional programming interface
 * @export
 */
export const PaymentsApiOutboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiOutboundApiAxiosParamCreator(configuration)
    return {
        /**
         * Encrypted and decrypted webhook sent to merchant - retries if response HTTP status code is not 200.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#webhook-flow). 
         * @summary Merchant webhook
         * @param {PaymentsApiOutboundApiWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhook(requestParameters: PaymentsApiOutboundApiWebhookRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const jSONMerchantWebhook: JSONMerchantWebhook = {
                encryptedData: requestParameters.encryptedData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhook(requestParameters.xInitializationVector, requestParameters.xAuthenticationTag, jSONMerchantWebhook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsApiOutboundApi - factory interface
 * @export
 */
export const PaymentsApiOutboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiOutboundApiFp(configuration)
    return {
        /**
         * Encrypted and decrypted webhook sent to merchant - retries if response HTTP status code is not 200.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#webhook-flow). 
         * @summary Merchant webhook
         * @param {PaymentsApiOutboundApiWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhook(requestParameters: PaymentsApiOutboundApiWebhookRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webhook(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhook operation in PaymentsApiOutboundApi.
 * @export
 * @interface PaymentsApiOutboundApiWebhookRequest
 */
export type PaymentsApiOutboundApiWebhookRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PaymentsApiOutboundApiWebhook
    */
    readonly xInitializationVector?: string
    
    /**
    * 
    * @type {string}
    * @memberof PaymentsApiOutboundApiWebhook
    */
    readonly xAuthenticationTag?: string
    
} & JSONMerchantWebhook

/**
 * PaymentsApiOutboundApiGenerated - object-oriented interface
 * @export
 * @class PaymentsApiOutboundApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentsApiOutboundApiGenerated extends BaseAPI {
    /**
     * Encrypted and decrypted webhook sent to merchant - retries if response HTTP status code is not 200.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#webhook-flow). 
     * @summary Merchant webhook
     * @param {PaymentsApiOutboundApiWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiOutboundApiGenerated
     */
    public webhook(requestParameters: PaymentsApiOutboundApiWebhookRequest = {}, options?: AxiosRequestConfig) {
        return PaymentsApiOutboundApiFp(this.configuration).webhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
